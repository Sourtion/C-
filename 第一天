# 第一天学习内容
# day 01
# 第一章 数组 part 01

# 数组理论基础
# 数组下标都是从0开始的，数组内存空间的地址是连续的。
# 因此在删除或者添加元素的时候，就难免要移动其他元素。
# C++中，要注意vector和array的区别，vector的底层实现是array，严格来讲vector是容器，不是数组。
# 数组的元素是不能删的，只能覆盖。
# 测试二维数组是连续分布的
void test_arr() {
	int array[2][3] = {
		{0, 1, 2},
		{3, 4, 5}
	};
	cout << &array[0][0] << " " << &array[0][1] << " " << &array[0][2] << endl;
	cout << &array[1][0] << " " << &array[1][1] << " " << &array[1][2] << endl;
} 

int main() {
	test_arr();
}

# 第一题
# 704. 二分查找
给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target，写一个函数搜索 nums 中的target， 如果目标值存在返回下标，否则返回 -1。
代码内容
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int left = 0;
        // 定义target在左闭右闭的区间里, [left, right]
        int right = nums.size() -1;
        // 当left==right，区间[left, right]依然有效，所以用<=
        while (left <= right) {
            // 防止溢出 等同于(left + right) / 2
            int middle = left + ((right - left) / 2); 
            if (nums[middle] > target) {
                // target 在左区间，所有[left, middle-1]
                right = middle - 1;
            } else if (nums[middle] < target) {
                // target在区间右边，所以[middle+1, right]
                left = middle + 1;
            } else {
                // nums[middle] == target
                // 数组中找到目标值，直接返回下标
                return middle;
            }
        }
        // 未找到目标
        return -1;
    }
};

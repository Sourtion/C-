算法学习|第三天|代码随想录
关于链表
通过指针串联在一起的线性结构，每一个节点由两部分组成
一个是数据域，一个是指针域（存放指向下一个节点的指针）
最后一个节点的指针域指向null（空指针的意思）

链表的入口节点称为链表的头结点也就是head。
分为单链表、双链表、循环链表
# 链表的定义
// 单链表
struct ListNode {
  // 节点上存储的元素
  int val;
  // 指向下一个节点的指针
  ListNode *next;
  // 节点的构造函数
  ListNode(int x) : val(x), next(NULL) {}
};

自定义构造函数初始化节点
ListNode* head = new ListNode(5);
或
ListNode* head = new ListNode();
head->val = 5;

203.移除链表元素  
删除链表中等于给定值 val 的所有节点。

方法一
使用原来的链表进行移除节点操作
class Solution {
public:
  ListNode* removeElements(ListNode* head, int val) {
    // 删除头结点
    while (head != Null && head->val == val) {
      ListNode* tmp = head;
      head = head->next;
      delete tmp;
    }

    // 删除非头结点
    ListNode* cur = head;
    while (cur != NULL && cur->next != NULL) {
      if (cur->next->val == val) {
        ListNode* tmp = cur->next;
        cur->next = cur->next->next;
        delete tmp;
      } else {
        cur = cur-next;
      }
    }
    return head;
  }
};

方法二
设置一个虚拟头结点再进行移除节点操作
class Solution {
public:
  ListNode* removeElements(ListNode* head, int val) {
    // 设置一个虚拟头结点
    ListNode* dummpyHead = new ListNode(0);
    // 将虚拟头结点指向head
    dummpyHead->next = head;
    ListNode* cur = dummpyHead;
    while (cur->next != NULL) {
      if (cur-next-val == val) {
        ListNode* tmp = cur->next;
        cur->next = cur->next->next;
        delete tmp;
      } else {
        cur = cur-next;
      }
    }
    head = dummpyHead->next;
    delete dummpyHead;
    return head;
  }
};

第二题
707.设计链表
在链表类中实现这些功能：

get(index)：            获取链表中第 index 个节点的值。如果索引无效，则返回-1。

addAtHead(val)：        在链表的第一个元素之前添加一个值为 val 的节点。
                        插入后，新节点将成为链表的第一个节点。

addAtTail(val)：        将值为 val 的节点追加到链表的最后一个元素。

addAtIndex(index,val)： 在链表中的第 index 个节点之前添加值为 val  的节点。
                        如果 index 等于链表的长度，则该节点将附加到链表的末尾。
                        如果 index 大于链表长度，则不会插入节点。
                        如果index小于0，则在头部插入节点。

deleteAtIndex(index)：   如果索引 index 有效，则删除链表中的第 index 个节点。

链表具有五个接口
设置一个虚拟头结点
class MyLinkedList {
public:
  // 定义链表节点结构体
  struct LinkedNode {
    int val;
    LinkedNode* next;
    LinkedNode(int val):val(val), next(nullptr){}
  };

  // 初始化链表
  MyLinkedList() {
    // 定义的头结点，属于一个虚拟头结点，而不是真正的链表
    _dummyHead = new LinkedNode(0);
    _size = 0;
  }

  // 获取到第 index 个节点数值，如果 index 是非法数值直接返回 -1 
  // 其中 index 是从0开始，第0个节点就是头结点
  int get(int index) {
    if (index > (_size -1) || index < 0) {
      return -1;
    }
    LinkedNode* cur = _dummyHead->next;
    // 防止进入死循环
    while(index--) {
      cur = cur->next;
    }
    return cur->val;
  }

  // 在链表最前面插入一个节点，插入完成后，新插入的节点为链表的新的头结点
  void addAtHead(int val) {
    LinkedNode* newNode = new LinkedNode(val);
    newNode->next = _dummyHead->next;
    _dummyHead->next = newNode;
    _size++;
  }

  // 在链表最后添加一个节点
  void addAtTail(int val) {
    LinkedNode* newNode = new LinkedNode(val);
    LinkedNode* cur = _dummyHead;
    while(cur->next != nullptr) {
      cur = cur->next;
    }
    cur->next = newNode;
    _size++;
  }

  // 在第index个节点之前插入一个新节点，例如index为0，那么新插入的节点为链表的新头节点。
  // 如果index 等于链表的长度，则说明是新插入的节点为链表的尾结点
  // 如果index大于链表的长度，则返回空
  // 如果index小于0，则在头部插入节点
  void addAtIndex(int index, int val) {
    // index 大于链表的长度，返回空
    if (index > _size) return;

    // index 小于 0 ，则在头部插入节点
    if (index < 0) index = 0;

    LinkedNode* newNode = new LinkedNode(val);
    LinkedNode* cur = _dummyHead;
    while(index--) {
      cur = cur->next;
    }
    newNode->next = cur->next;
    cur-next = newNode;
    _size++;
  }

  // 删除第 index 个节点，如果 index 大于等于链表的长度，直接 return，注意index从0开始
  void deleteAtIndex(int index) {
    if (index >= _size || index < 0) {
      return;
    }
    LinkedNode* cur = _dummyHead;
    while(index--) {
      cur = cur->next;
    }
    LinkedNode* tmp = cur->next;
    cur->next = cur->next->next;
    delete tmp;
    //delete命令指示释放了tmp指针原本所指的那部分内存，
    //被delete后的指针tmp的值（地址）并非就是NULL，而是随机值。也就是被delete后，
    //如果不再加上一句tmp=nullptr,tmp会成为乱指的野指针
    //如果之后的程序不小心使用了tmp，会指向难以预想的内存空间
    tmp = nullptr;
    _szie--;
  }

  // 打印链表
  void printLinkedList() {
    LinkedNode* cur = _dummyHead;
    while (cur->next != nullptr) {
      cout << cur->next->val<<" ";
      cur = cur->next;
    }
    cout << endl;
  }
private:
  int _size;
  LinkedNode* _dummyHead;

};

第三题
206.反转链表
反转一个单链表。
示例: 输入: 1->2->3->4->5->NULL 输出: 5->4->3->2->1->NULL

主要思路：
定义一个 cur 指针，指向头结点，再定义一个 pre 指针，初始化为null
将 cur->next 节点用tmp指针保存一下
改变 cur->next 的指向，将cur->next指向pre

方法一：
双指针法
class Solution {
public:
  ListNode* reverseList(ListNode* head) {
  // 保存 cur 的下一个节点    
    ListNode* tmp;  
    ListNode* cur = head;
    ListNode* pre = NULL;
    while(cur) {
      // 保存一下 cur 的下一个节点
      // 需要改变 cur->next
      tmp = cur-next;
      // 翻转操作
      cur->next = pre;
      // 更新 pre 和 cur 指针
      pre = cur;
      cur = tmp;
    }
    return pre;
  }
};

方法二：
递归法
class Solution {
public:
  ListNode* reverse(ListNode* pre, ListNode* cur) {
    if (cur==NULL) return pre;
    ListNode* temp = cur->next;
    cur->next = pre;
    return reverse(cur, temp);
  }
  ListNode* reverseList(ListNode* head) {
    return reverse(NULL, head);
  }
};












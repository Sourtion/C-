算法学习|第二天|代码随想录
第一题
977.有序数组的平方 
给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。
算法思路
vector<int> result
k = num.size - 1
for (int i=0, j=num.size-1; i<=j;  )
  if (nums[i] * nums[i] > nums[j]*nums[j])
    result[k--] = nums[i] * nums[i];
      i++;
  else {
    result[k--] = nums[j] * nums[j]
      j--;
  }
return results;

方法一、暴力排序
每个数平方之后，再进行排序
class Solution {
public:
  vector<int> sortedSquares(vector<int>& A) {
    for (int i=0; i<A.size(); i++) {
      A[i] *= A[i];
    }
    // 快速排序
    sort(A.begin(), A.end());
    return A;
  }
};

方法二、双指针法
有序数组的最大值在数组的两端。
考虑双指针法，i指向起始位置，j指向终止位置。
定义一个新数组result，和 nums 数组一样的大小，让k指向 result 数组终止位置。
class Solution {
public:
  vector<int> sortedSquares(vector<int>& nums) {
    int k = nums.size() - 1;
    vector<int>& result(nums.size(), 0);
    // 最后两个元素需要排序
    for (int i=0, j=nums.size()-1; i<=j;) {
      if (nums[i] * nums[i] < nums[j] * nums[j]) {
        result[k--] = nums[i] * nums[i];
        j--;
      } else {
        reuslt[k--] = nums[j] * nums[j];
        i++;
      }
    }
    return results;
  }
}



第二题
209.长度最小的子数组
给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。

方法一、暴力解法
class Solution {
public:
  int minSubArrayLen(int s, vector<int>& nums) {
    // 最终的结果
    int result = INT_MAX;
    // 子序列的数值之和
    int sum = 0;
    // 子序列的长度
    int subLength = 0;
    // 设置子序列起点为 i
    for (int i=0; i<nums.size(); i++) {
      sum = 0;
      // 设置子序列终止位置为 j
      for (int j=i; j<nums.size(); j++) {
        sum += nums[j];
        // 当 sum 大于 s 时，更新 result
        if (sum > s) {
          // 取子序列的长度
          subLength = j-i+1;
          result = result < subLength ? result : subLength;
          // 找到最短子序列，完成即进行 break
          break;
        }
      }
    }
    // 如果 result 没有被赋值的话，则返回 0 ，说明没有符合的子序列
    return result == INT32_MAX ? 0 : result;
  }
};

方法二、滑动窗口
根据当前子序列和大小的情况，不断调整子序列的起始位置。
先设立终止位置，因为是一个持续的过程，需要使用while。
class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        int result = INT32_MAX;
        // 滑动窗口数值之后
        int sum = 0;
        // 滑动窗口的起始位置
        int i = 0;
        // 滑动窗口的长度
        int length = 0;
        for (int j=0; j<nums.size(); j++) {
          sum += sum[j];
          // 使用 while ，每次更新 i （起始位置）， 并不断更新子序列是否满足条件
          while (sum >= s) {
            lenth = j - i + 1;
            result = result < length ? result : length;
            // 滑动窗口的精髓之处，不断更新 i （子序列的起始位置），从而减少起始值
            sum -= sum[i++];
          }
        }
        // 如果 result 没有赋值的话，则返回0；说明序列中没有符合条件的子序列
        return result == INT32_MAX ? 0 : result;
    }
};
  

59.螺旋矩阵II
给定一个正整数 n，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。
(坚持循环不变量原则)
注意节点和边界的问题
如何处理好循环的问题，以及不变量的处理，选择 左闭右开 的方式，不包含最后一个节点
while循环,其中n进行判断

模拟顺时针画矩阵的过程：
·填充上行从左至右
·填充右列从上至下
·填充下行从右至左
·填充左列从下至上
从外圈至内圈

算法思路:
startx=0, starty=0;
offset=1;
count=1;
while(n/2) {
  for (j=starty; j<n-offset; j++) 
    nums[startx][j] = count++;
  for (i=startx; i<n-offset; i++)
    nums[i][j] = count++;
  for (;j>straty;j--) 
    nums[i][j] = count++;
  for (;i>startx;i--)
    nums[i][j] = count++;
}

startx++;
starty++;
offset++;

代码：
class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
      // 定义一个二位数组
      vector<vector<int>> rex(n, vector<int>(n, 0));
      // 定义循环每一圈的起始位置
      int startX = 0, startY = 0;
      // 判断每圈循环次数
      int loop = n / 2;
      // 矩阵中间的位置
      int mid = n / 2;
      // 矩阵中旋转位置进行赋值用      
      int count = 1;
      // 需要控制每一条边遍历的长度，每次循环右边界收缩一位
      int offset = 1;
      int i, j;
      while (loop--) {
        i = startX;
        j = startY;
        // 进行循环操作
        for (j=startY; j<n-offset; j++) {
          rex[startX][j] = count++;
        }
        for (i=startX; i<n-offset; i++) {
          rex[i][j] = count++;
        }
        for ( ; j>startY; j--) {
          rex[i][j] = count++;
        }
        for (; i>startX; i--) {
          rex[i][j] = count++;
        }
        // 第二圈开始的时候，起始位置要各自加上1，例如：第一圈起始位置为（0，0），则第二圈起始位置为（1，1）
        stratX++;
        startY++;
        // offset 控制每一圈中每条边的遍历长度
        offset++;
      }
      // 如果 n 为奇数的话，需要单独给矩阵最中间的位置进行赋值
      if (n % 2) {
        rex[mid][mid] = count;
      }
      return rex;
    }
};
